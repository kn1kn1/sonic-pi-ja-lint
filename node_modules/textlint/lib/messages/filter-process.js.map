{"version":3,"sources":["../../src/messages/filter-process.js"],"names":[],"mappings":";AACA;;;;;;;;kBAiBwB,c;;AAhBxB;;;;;;;;;;;;AAOA,IAAM,mBAAmB,SAAnB,gBAAmB,CAAC,KAAD,EAAQ,KAAR,EAAkB;AAAA,gCAClB,KADkB;;AAAA,QAChC,KADgC;AAAA,QACzB,GADyB;;AAEvC,WAAO,SAAS,KAAT,IAAkB,SAAS,GAAlC;AACH,CAHD;;;;;;AASe,SAAS,cAAT,GAAuC;AAAA,QAAf,QAAe,yDAAJ,EAAI;;AAClD,QAAM,kBAAkB,SAAS,MAAT,CAAgB,mBAAW;AAC/C,eAAO,QAAQ,IAAR,KAAiB,sBAAY,IAApC;AACH,KAFuB,CAAxB;AAGA,QAAM,iBAAiB,SAAS,MAAT,CAAgB,mBAAW;AAC9C,eAAO,QAAQ,IAAR,KAAiB,sBAAY,MAApC;AACH,KAFsB,CAAvB;;AAIA,WAAO,gBAAgB,MAAhB,CAAuB,mBAAW;AACrC,eAAO,CAAC,eAAe,IAAf,CAAoB,yBAAiB;AACzC,gBAAM,oBAAoB,iBAAiB,QAAQ,KAAzB,EAAgC,cAAc,KAA9C,CAA1B;AACA,gBAAI,qBAAqB,cAAc,cAAvC,EAAuD;;AAEnD,oBAAI,cAAc,cAAd,KAAiC,GAArC,EAA0C;AACtC,2BAAO,IAAP;AACH;AACD,uBAAO,QAAQ,MAAR,KAAmB,cAAc,cAAxC;AACH;AACD,mBAAO,iBAAP;AACH,SAVO,CAAR;AAWH,KAZM,CAAP;AAaH","file":"filter-process.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport MessageType from \"../shared/type/MessageType\";\n/**\n * the `index` is in the `range` and return true.\n * @param {Number} index\n * @param {Number[]} range\n * @returns {boolean}\n */\nconst isContainedRange = (index, range) => {\n    const [start, end] = range;\n    return start <= index && index <= end;\n};\n/**\n * filter messages by ignore messages\n * @param {Object[]} messages\n * @returns {Object[]} filtered messages\n */\nexport default function filterMessages(messages = []) {\n    const lintingMessages = messages.filter(message => {\n        return message.type === MessageType.lint;\n    });\n    const ignoreMessages = messages.filter(message => {\n        return message.type === MessageType.ignore;\n    });\n    // if match, reject the message\n    return lintingMessages.filter(message => {\n        return !ignoreMessages.some(ignoreMessage => {\n            const isInIgnoringRange = isContainedRange(message.index, ignoreMessage.range);\n            if (isInIgnoringRange && ignoreMessage.ignoringRuleId) {\n                // \"*\" is wildcard that match any rule\n                if (ignoreMessage.ignoringRuleId === \"*\") {\n                    return true;\n                }\n                return message.ruleId === ignoreMessage.ignoringRuleId;\n            }\n            return isInIgnoringRange;\n        });\n    });\n}\n"]}