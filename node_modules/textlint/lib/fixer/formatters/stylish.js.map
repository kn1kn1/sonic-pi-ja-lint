{"version":3,"sources":["../../../src/fixer/formatters/stylish.js"],"names":["chalk","require","table","widthOfString","pluralize","word","count","module","exports","results","options","enabled","color","undefined","output","totalFixed","errors","summaryColor","greenColor","forEach","result","messages","applyingMessages","remainingMessages","length","underline","filePath","map","message","messageType","bold","line","column","replace","gray","ruleId","align","stringLength","str","lines","stripColor","split","Math","max","apply","el","m","p1","p2","join"],"mappings":"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","file":"stylish.js","sourcesContent":["\"use strict\";\nvar chalk = require(\"chalk\");\nvar table = require(\"text-table\");\nvar widthOfString = require(\"string-width\");\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return (count === 1 ? word : word + \"s\");\n}\n\nmodule.exports = function (results, options) {\n    // default: true\n    chalk.enabled = options.color !== undefined ? options.color : true;\n    var output = \"\\n\";\n    var totalFixed = 0;\n    var errors = 0;\n    var summaryColor = \"yellow\";\n    var greenColor = \"green\";\n\n    results.forEach(function (result) {\n        var messages = result.applyingMessages;\n        // still error count\n        var remainingMessages = result.remainingMessages;\n        errors += remainingMessages.length;\n        if (messages.length === 0) {\n            return;\n        }\n\n        output += chalk.underline(result.filePath) + \"\\n\";\n\n        output += table(\n                messages.map(function (message) {\n                    // fixable\n                    totalFixed++;\n                    var messageType = chalk[greenColor].bold(\"\\u2714 \");\n\n                    return [\n                        \"\",\n                        message.line || 0,\n                        message.column || 0,\n                        messageType,\n                        message.message.replace(/\\.$/, \"\"),\n                        chalk.gray(message.ruleId || \"\")\n                    ];\n                }),\n                {\n                    align: [\"\", \"r\", \"l\"],\n                    stringLength: function (str) {\n                        var lines = chalk.stripColor(str).split(\"\\n\");\n                        return Math.max.apply(null, lines.map(function (line) {\n                            return widthOfString(line);\n                        }));\n                    }\n                }\n            ).split(\"\\n\").map(function (el) {\n                return el.replace(/(\\d+)\\s+(\\d+)/, function (m, p1, p2) {\n                    return chalk.gray(p1 + \":\" + p2);\n                });\n            }).join(\"\\n\") + \"\\n\\n\";\n    });\n\n    if (totalFixed > 0) {\n        output += chalk[greenColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2714/index.htm\n            \"\\u2714 Fixed \", totalFixed, pluralize(\" problem\", totalFixed), \"\\n\"\n        ].join(\"\"));\n    }\n\n    if (errors > 0) {\n        output += chalk[summaryColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2716/index.htm\n            \"\\u2716 Remaining \", errors, pluralize(\" problem\", errors), \"\\n\"\n        ].join(\"\"));\n    }\n\n    return totalFixed > 0 ? output : \"\";\n};\n"]}