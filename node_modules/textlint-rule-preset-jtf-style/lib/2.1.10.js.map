{"version":3,"sources":["../src/2.1.10.js"],"names":[],"mappings":";AACA;;;;;;;;;;;AAMA;;AACA;;;;AACA,SAAS,QAAT,CAAkB,OAAlB,EAA2B;QAClB,SAA+C,QAA/C,OADkB;QACV,YAAuC,QAAvC,UADU;QACC,SAA4B,QAA5B,OADD;QACS,QAAoB,QAApB,MADT;QACgB,YAAa,QAAb,UADhB;;AAEvB,+BACK,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,CAAC,iCAAkB,IAAlB,EAAwB,OAAxB,CAAD,EAAmC;AACnC,mBADmC;SAAvC;AAGA,YAAI,OAAO,UAAU,IAAV,CAAP;;AAJU,YAMV,kBAAkB,WAAlB;;AANU,YAQV,iBAAiB,YAAjB,CARU;AASd,YAAI,cAAJ,CATc;AAUd,eAAO,QAAQ,gBAAgB,IAAhB,CAAqB,IAArB,CAAR,EAAoC;;;AAGvC,gBAAI,gBAAgB,MAAM,CAAN,CAAhB,CAHmC;AAIvC,kDAAqB,aAArB,EAAoC,cAApC,EAAoD,OAApD,CAA4D,oBAAY;oBAC7D,QAAS,SAAT,MAD6D;;AAEpE,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,mBAAd,EAAmC;AAC5C,2BAAO,MAAM,KAAN,GAAc,KAAd;AACP,yBAAK,MAAM,gBAAN,CAAuB,CAAC,MAAM,KAAN,GAAc,KAAd,EAAqB,MAAM,KAAN,GAAc,KAAd,GAAsB,CAAtB,CAA7C,EAAuE,GAAvE,CAAL;iBAFS,CAAb,EAFoE;aAAZ,CAA5D,CAJuC;SAA3C;MAXR,CAFuB;CAA3B;kBA4Be;AACX,YAAQ,QAAR;AACA,WAAO,QAAP","file":"2.1.10.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.10.算用数字の位取りの表記\n桁区切りには「カンマ」、小数点には「ピリオド」を使います。\nただし桁区切りの「カンマ」は省略する場合があります。\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {matchCaptureGroupAll} from \"match-index\";\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            // 数字,で絞って\n            let numberWithComma = /([\\d,]+)/g;\n            // 0,xxx な文字列を検出する\n            let strictMatchReg = /^0+(,)\\d+$/;\n            let match;\n            while (match = numberWithComma.exec(text)) {\n                // この段階では 10,000 も含まれている\n                // ^0,xxx をだけを取り出す\n                let matchedString = match[0];\n                matchCaptureGroupAll(matchedString, strictMatchReg).forEach(subMatch => {\n                    const {index} = subMatch;\n                    report(node, new RuleError(\"小数点には「ピリオド」を使います。\", {\n                        index: match.index + index,\n                        fix: fixer.replaceTextRange([match.index + index, match.index + index + 1], \".\")\n                    }));\n                });\n            }\n        }\n    }\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}