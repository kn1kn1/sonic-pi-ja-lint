{"version":3,"sources":["../../src/util/pair-checker.js"],"names":[],"mappings":";AACA;;;;;;;;;;;;QAUgB;;AAFhB;;;;AACA;;;;;;AACO,SAAS,SAAT,CAAmB,OAAnB,QAA2C;;;QAAd,iBAAc;QAAR,mBAAQ;;AAC9C,0BAAO,IAAP,EAD8C;AAE9C,0BAAO,KAAP,EAF8C;QAGzC,SAAwC,QAAxC,OAHyC;QAGjC,YAAgC,QAAhC,UAHiC;QAGtB,SAAqB,QAArB,OAHsB;QAGd,YAAa,QAAb,UAHc;;AAI9C,QAAI,SAAS,mCAAe,OAAf,CAAT,CAJ0C;AAK9C,QAAI,gBAAgB,KAAhB,CAL0C;AAM9C,QAAI,wBAAwB,EAAxB;;;;;;AAN0C,QAYxC,wBAAwB,SAAxB,qBAAwB,CAAC,qBAAD,EAA2B;AACrD,YAAI,YAAY,KAAZ,CADiD;AAErD,YAAI,mBAAmB,EAAnB,CAFiD;AAGrD,8BAAsB,OAAtB,CAA8B,gBAAQ;AAClC,gBAAM,OAAO,UAAU,IAAV,CAAP;;AAD4B,gBAG9B,YAAY,CAAC,CAAD,CAHkB;AAIlC,gBAAI,CAAC,SAAD,EAAY;AACZ,4BAAY,KAAK,OAAL,CAAa,IAAb,CAAZ,CADY;AAEZ,oBAAI,cAAc,CAAC,CAAD,EAAI;AAClB,qCAAiB,IAAjB,CAAsB;AAClB,kCADkB;AAElB,+BAAO,SAAP;qBAFJ,EADkB;AAKlB,gCAAY,IAAZ,CALkB;iBAAtB;aAFJ;;AAJkC,gBAe9B,YAAY,KAAK,OAAL,CAAa,KAAb,EAAoB,YAAY,CAAZ,CAAhC,CAf8B;AAgBlC,gBAAI,cAAc,CAAC,CAAD,EAAI;AAClB,iCAAiB,GAAjB,GADkB;AAElB,4BAAY,KAAZ,CAFkB;aAAtB;SAhB0B,CAA9B,CAHqD;AAwBrD,eAAO,gBAAP,CAxBqD;KAA3B,CAZgB;AAsC9C,8CACK,OAAO,SAAP,YAAkB,MAAK;AACpB,YAAI,OAAO,WAAP,CAAmB,IAAnB,EAAyB,CAAC,OAAO,UAAP,CAA1B,CAAJ,EAAmD;AAC/C,mBAD+C;SAAnD;AAGA,gCAAwB,EAAxB,CAJoB;AAKpB,wBAAgB,IAAhB,CALoB;+BAOvB,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,CAAC,aAAD,EAAgB;AAChB,mBADgB;SAApB;AAGA,8BAAsB,IAAtB,CAA2B,IAA3B,EAJc;+BAMd,OAAO,SAAP,iCAA0B;AAC1B,YAAM,kBAAkB,sBAAsB,qBAAtB,CAAlB;;AADoB,qBAG1B,GAAgB,KAAhB;;AAH0B,YAKtB,gBAAgB,MAAhB,KAA2B,CAA3B,EAA8B;AAC9B,mBAD8B;SAAlC;AAGA,wBAAgB,OAAhB,CAAwB,iBAAmB;gBAAjB,kBAAiB;gBAAX,oBAAW;;AACvC,mBAAO,IAAP,EAAa,IAAI,SAAJ,CAAiB,iBAAY,sBAAiB,OAAO,KAArD,EAA8D;AACvE,4BADuE;aAA9D,CAAb,EADuC;SAAnB,CAAxB,CAR0B;aAdlC,CAtC8C;CAA3C","file":"pair-checker.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * 「と」といったペアがちゃんと閉じられているかをチェックします\n * @param {object} context\n * @param {string} left\n * @param {string} right\n * @returns {object}\n */\nimport assert from \"assert\";\nimport {RuleHelper} from \"textlint-rule-helper\";\nexport function checkPair(context, {left, right}) {\n    assert(left);\n    assert(right);\n    let {Syntax, RuleError, report, getSource} = context;\n    let helper = new RuleHelper(context);\n    let isInParagraph = false;\n    let currentStrInParagraph = [];\n    /**\n     * `Str` nodeの配列を受け取り、pairが見つからないnodeを返す\n     * @param {Object} currentStrInParagraph\n     * @returns {{node, index}[]}\n     */\n    const foundMissingPairNodes = (currentStrInParagraph) => {\n        let foundLeft = false;\n        let matchParentheses = [];\n        currentStrInParagraph.forEach(node => {\n            const text = getSource(node);\n            // left を探す\n            let leftIndex = -1;\n            if (!foundLeft) {\n                leftIndex = text.indexOf(left);\n                if (leftIndex !== -1) {\n                    matchParentheses.push({\n                        node,\n                        index: leftIndex\n                    });\n                    foundLeft = true\n                }\n            }\n            // right を探す\n            let pairIndex = text.indexOf(right, leftIndex + 1);\n            if (pairIndex !== -1) {\n                matchParentheses.pop();\n                foundLeft = false;\n            }\n        });\n        return matchParentheses;\n    };\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            currentStrInParagraph = [];\n            isInParagraph = true\n        },\n        [Syntax.Str](node){\n            if (!isInParagraph) {\n                return;\n            }\n            currentStrInParagraph.push(node);\n        },\n        [`${Syntax.Paragraph}:exit`](){\n            const missingPairList = foundMissingPairNodes(currentStrInParagraph);\n            // 探索おわり\n            isInParagraph = false;\n            // 全ての対が見つかったなら配列は空になる\n            if (missingPairList.length === 0) {\n                return;\n            }\n            missingPairList.forEach(({node, index}) => {\n                report(node, new RuleError(`${left}の対となる${right}が見つかりません。${left}${right}`, {\n                    index\n                }));\n            });\n        }\n    };\n\n}"]}