{"version":3,"sources":["../src/2.2.2.js"],"names":[],"mappings":"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","file":"2.2.2.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {isUserWrittenNode} from \"./util/node-util\";\nfunction matchToReplace(text, pattern, matchFn) {\n    var match = pattern.exec(text);\n    if (match) {\n        return matchFn(text, pattern, match);\n    }\n    return null\n}\n\nconst numberMap = {\n    \"一\": 1,\n    \"二\": 2,\n    \"三\": 3,\n    \"四\": 4,\n    \"五\": 5,\n    \"六\": 6,\n    \"七\": 7,\n    \"八\": 8,\n    \"九\": 9,\n    \"十\": 10,\n    \"壱\": 1,\n    \"弐\": 2,\n    \"参\": 3,\n    \"拾\": 10,\n    \"百\": 100,\n    \"〇\": 0\n};\n// http://www.drk7.jp/MT/archives/001587.html\nfunction _num2ja(num, opt) {\n    var sign = {\n        '+': '',\n        '-': '−'\n    };\n    var zero = '零';\n    var point = '点';\n    var zero2nine = ['〇', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\n    var ten2thou = ['', '十', '百', '千'];\n    var suffices = [\n        '', '万', '億', '兆', '京', '垓', '禾予', '穣', '溝', '澗', '正', '載,', '極', '恒河沙', '阿僧祇', '那由他', '不可思議',\n        '無量大数'\n    ];\n\n    num = num.replace(/,/g, '');\n    num.match(/([+-])?(\\d+)(?:\\.(\\d+))?/i);\n    var sig = RegExp.$1;\n    var int = RegExp.$2;\n    var fract = RegExp.$3;\n    var seisuu = '';\n    var shins = [];\n\n    for (let i = int.length; i > 0; i -= 4) {\n        shins.push(int.substring(i, i - 4));\n    }\n    if (shins.length >= 18) {\n        return suffices[17];\n    }\n\n    var suffix = 0;\n    for (let i = 0; i < shins.length; i++) {\n        var shin = shins[i];\n        if (shin == '0000') {\n            suffix++;\n            continue;\n        }\n        var sens = '';\n        var keta = 0;\n        var digits = shin.split('').reverse();\n        for (var j = 0; j < digits.length; j++) {\n            var digit = digits[j];\n\n            if (opt['fixed4'] || opt['with_arabic']) {\n                if (opt['with_arabic']) {\n                    var flg = 0;\n                    // 余分な 0 を削除する\n                    if (digit == '0') {\n                        for (var k = j + 1; k < digits.length; k++) {\n                            flg += (digits[k] == '0') ? 0 : 1;\n                        }\n                        if (flg == 0) {\n                            digit = '';\n                        }\n                    }\n                    sens = digit + sens;\n                } else {\n                    sens = zero2nine[digit] + sens;\n                }\n            } else {\n                var suuji = (digit == 1 && !opt['p_one'] && keta > 0) ? '' : zero2nine[digit];\n                if (digit != 0) {\n                    sens = suuji + ten2thou[keta] + sens\n                }\n            }\n            keta++;\n        }\n        seisuu = sens + suffices[suffix++] + seisuu;\n    }\n    var result = (sign[sig] || '') + seisuu;\n    result = result || zero;\n    if (fract) {\n        result = result + point + fract;\n    }\n    return result;\n}\n\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 漢数字 -> 算用数字\n            const toNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const index = match.index;\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    let result = 0;\n                    match.split(\"\").forEach(kanNumber => {\n                        result += numberMap[kanNumber];\n                    });\n                    return all.replace(match, result);\n                });\n                const ruleError = new RuleError(`${matchedString} => ${expected}\n数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。`, {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                });\n                report(node, ruleError);\n            };\n\n\n            // 算用数字 -> 漢数字\n\n            const toKanNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, _num2ja(match, {'with_arabic': false}));\n                });\n                const index = match.index;\n                report(node, new RuleError(`${matchedString} => ${expected}\n慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。`, {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                }));\n            };\n\n            // ignorePatternにマッチしたらmatchFnを呼ばないようにする(エラーを無視する)\n            const ignoreWhenMatched = (ignorePattern, matchFn) => {\n                return (text, pattern, match) => {\n                    if (ignorePattern.test(text)) {\n                        return null;\n                    } else {\n                        return matchFn(text, pattern, match);\n                    }\n                }\n            };\n\n            // ＊数えられる数字は算用数字を使う\n            // 数十万、数百億にマッチしないように\"数\"という文字から始まるものは除外\n            // https://github.com/azu/textlint-rule-preset-jtf-style/pull/23\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g,\n                ignoreWhenMatched(/数([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g, toNumber)\n            );\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)つ/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)回/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)か月/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)番目/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)進法/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)次元/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)章/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)節/g, toNumber);\n            // ＊漢数字を使う\n            // 慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。\n            matchToReplace(text, /世界(1)/g, toKanNumber);\n            matchToReplace(text, /(1)時的/g, toKanNumber);\n            matchToReplace(text, /(1)部分/g, toKanNumber);\n            matchToReplace(text, /第(3)者/g, toKanNumber);\n            matchToReplace(text, /(1)種/g, toKanNumber);\n            matchToReplace(text, /(1)部の/g, toKanNumber);\n            matchToReplace(text, /(1)番に/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)倍/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)[兆億万]/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)年/g, toKanNumber);\n            matchToReplace(text, /([0-9]+)次関数/g, toKanNumber);\n            matchToReplace(text, /(5)大陸/g, toKanNumber);\n        }\n    }\n}\n\n// 2.2.2. 算用数字と漢数字の使い分け\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}