// LICENSE : MIT
"use strict";
/*
1.1.5.図表のキャプション
文章の内容に応じて、敬体、常体、体言止めを使います。
いずれの場合も、複数の文体をできるだけ混在させないことが重要です。
通常、文末に句点(。)を付けませんが、複数の文章になる場合は句点を使用します。

キャプション間で文体が混ざっていないことを確認する。
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var _ref5;

    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    var desumasuList = [];
    var dearuList = [];

    function resetState() {
        desumasuList = [];
        dearuList = [];
    }

    var imagePaddingLet = 2; // ![ の分paddingを付ける
    function reportResult(list, _ref) {
        var desumasu = _ref.desumasu;
        var dearu = _ref.dearu;

        list.forEach(function (_ref2) {
            var node = _ref2.node;
            var matches = _ref2.matches;

            matches.forEach(function (match) {
                var message = void 0;
                if (desumasu) {
                    message = "図表のキャプションを敬体(ですます調)に統一して下さい。\n図表のキャプション内で敬体、常体を混在させないことが重要です。\n\"" + match.value + "\"が常体(である調)です。";
                } else if (dearu) {
                    message = "図表のキャプションを常体(である調)に統一して下さい。\n図表のキャプション内で敬体、常体を混在させないことが重要です。\n\"" + match.value + "\"が敬体(ですます調)です。";
                }
                report(node, new RuleError(message, {
                    line: match.lineNumber - 1,
                    column: match.columnIndex + imagePaddingLet
                }));
            });
        });
    }

    return _ref5 = {}, _defineProperty(_ref5, Syntax.Document, resetState), _defineProperty(_ref5, Syntax.Image, function (node) {
        var text = node.alt;
        // alt がない場合は無視する
        if (text === undefined || text === null) {
            return;
        }
        var retDesumasu = (0, _analyzeDesumasuDearu.analyzeDesumasu)(text);
        if (retDesumasu.length > 0) {
            desumasuList.push({
                node: node,
                matches: retDesumasu
            });
        }
        var retDearu = (0, _analyzeDesumasuDearu.analyzeDearu)(text);
        if (retDearu.length > 0) {
            dearuList.push({
                node: node,
                matches: retDearu
            });
        }
    }), _defineProperty(_ref5, Syntax.Document + ":exit", function undefined() {
        var desumasuCount = desumasuList.reduce(function (count, _ref3) {
            var matches = _ref3.matches;
            return count + matches.length;
        }, 0);
        var dearuCount = dearuList.reduce(function (count, _ref4) {
            var matches = _ref4.matches;
            return count + matches.length;
        }, 0);
        if (desumasuCount === 0 || dearuCount === 0) {
            return;
        }
        if (desumasuCount > dearuCount) {
            reportResult(dearuList, {
                desumasu: true
            });
        } else if (desumasuCount < dearuCount) {
            reportResult(desumasuList, {
                dearu: true
            });
        } else {
            reportResult(dearuList, {
                desumasu: true
            });
        }
    }), _ref5;
};

var _analyzeDesumasuDearu = require("analyze-desumasu-dearu");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = exports['default'];
//# sourceMappingURL=1.1.5.js.map