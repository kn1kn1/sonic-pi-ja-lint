{"version":3,"sources":["../src/1.2.1.js"],"names":[],"mappings":";AACA;;;;;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAOA;;;;;;;;AANA,IAAM,KAAK,oBAAK,GAAL,CAAL;;;;;;;;;AASN,IAAM,aAAa,2CAAb;;AAKN,IAAM,cAAc,4CAAd;;AAKN,IAAM,gBAAgB;AAClB,SAAK,GAAL;AACA,SAAK,GAAL;CAFE;;AAKN,IAAM,WAAW,SAAX,QAAW,CAAC,OAAD,EAAa;QACrB,SAA+C,QAA/C,OADqB;QACb,YAAuC,QAAvC,UADa;QACF,SAA4B,QAA5B,OADE;QACM,QAAoB,QAApB,MADN;QACa,YAAa,QAAb,UADb;;AAE1B,+BACK,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,CAAC,iCAAkB,IAAlB,EAAwB,OAAxB,CAAD,EAAmC;AACnC,mBADmC;SAAvC;AAGA,YAAM,OAAO,UAAU,IAAV,CAAP,CAJQ;AAKd,YAAM,cAAc,sCAAqB,IAArB,EAA2B,UAA3B,CAAd,CALQ;AAMd,YAAM,eAAe,sCAAqB,IAArB,EAA2B,WAA3B,CAAf,CANQ;AAOd,YAAM,UAAU,4BAAa,WAAb,EAA0B,YAA1B,CAAV,CAPQ;AAQd,gBAAQ,OAAR,CAAgB,iBAAS;AACrB,gBAAM,SAAS,cAAc,MAAM,IAAN,CAAvB,CADe;AAErB,gBAAM,gBAAgB,MAAM,KAAN,CAFD;AAGrB,mBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,sDAAd,EAAsE;AAC/E,uBAAO,aAAP;AACA,qBAAK,MAAM,gBAAN,CAAuB,CAAC,aAAD,EAAgB,gBAAgB,CAAhB,CAAvC,EAA2D,MAA3D,CAAL;aAFS,CAAb,EAHqB;SAAT,CAAhB,CARc;MADtB,CAF0B;CAAb;kBAsBF;AACX,YAAQ,QAAR;AACA,WAAO,QAAP","file":"1.2.1.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport regx from 'regx';\nimport {japaneseRegExp} from \"./util/regexp\";\nimport {matchCaptureGroupAll} from \"match-index\";\nimport mergeMatches from \"./util/merge-matches\";\nconst rx = regx(\"g\");\n/*\n1.2.1. 句点(。)と読点(、)\n句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。\n「4.1.1 句点(。)」と「4.1.2 読点(、)」を参照してください。\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\n\n// [,.]{日本語}\nconst leftTarget = rx`\n        ([,\\.])\n        ${japaneseRegExp}\n    `;\n// {日本語}[,.]\nconst rightTarget = rx`\n        ${japaneseRegExp}\n        ([,\\.])\n    `;\n// . => 。 の置換マップ\nconst replaceSymbol = {\n    \".\": \"。\",\n    \",\": \"、\"\n};\n\nconst reporter = (context) => {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            const leftMatches = matchCaptureGroupAll(text, leftTarget);\n            const rightMatches = matchCaptureGroupAll(text, rightTarget);\n            const matches = mergeMatches(leftMatches, rightMatches);\n            matches.forEach(match => {\n                const symbol = replaceSymbol[match.text];\n                const indexOfSymbol = match.index;\n                report(node, new RuleError(\"句読点には全角の「、」と「。」を使います。和文の句読点としてピリオド(.)とカンマ(,)を使用しません。\", {\n                    index: indexOfSymbol,\n                    fix: fixer.replaceTextRange([indexOfSymbol, indexOfSymbol + 1], symbol)\n                }));\n            })\n        }\n    }\n};\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}