// LICENSE : MIT
"use strict";
/*
1.1.1.本文

本文の文体は、敬体(ですます調)あるいは常体(である調)のどちらかで統一します。
敬体と常体を混在させないようにします。
敬体と常体のどちらを使うかは、文書の目的や読み手に応じて決めます。

 敬体(ですます調)
一般読者向けの紹介文、パンフレット、マニュアル、ウェブサイトの本文では、基本的に「敬体」を使います。
親しみやすい、柔らかい雰囲気で内容を伝えることができます。

 常体(である調)
常体は、簡潔に、力強い雰囲気で内容を伝えることができる文体です
丁寧ではない印象を読み手に与える場合があるため、通常、一般向けのマニュアルの本文では使われません。
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (context) {
    var _ref5;

    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var getSource = context.getSource;

    var helper = new _textlintRuleHelper.RuleHelper(context);
    var desumasuList = [];
    var dearuList = [];

    function reportResult(list, _ref) {
        var desumasu = _ref.desumasu;
        var dearu = _ref.dearu;

        list.forEach(function (_ref2) {
            var node = _ref2.node;
            var matches = _ref2.matches;

            matches.forEach(function (match) {
                var message = void 0;
                if (desumasu) {
                    message = "本文を常体(である調)に統一して下さい。\n本文の文体は、敬体(ですます調)あるいは常体(である調)のどちらかで統一します。\n\"" + match.value + "\"が敬体(ですます調)です。";
                } else if (dearu) {
                    message = "本文を敬体(ですます調)に統一して下さい。\n本文の文体は、敬体(ですます調)あるいは常体(である調)のどちらかで統一します。\n\"" + match.value + "\"が常体(である調)です。";
                }
                report(node, new RuleError(message, {
                    line: match.lineNumber - 1,
                    column: match.columnIndex
                }));
            });
        });
    }

    return _ref5 = {}, _defineProperty(_ref5, Syntax.Document, function () {
        desumasuList = [];
        dearuList = [];
    }), _defineProperty(_ref5, Syntax.Str, function (node) {
        // 本文以外は無視する
        // => isUserWrittenNode
        if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {
            return;
        }
        // Listについては1.1.3. 箇条書きで扱う
        if (helper.isChildNode(node, [Syntax.ListItem])) {
            return;
        }
        var text = getSource(node);
        var retDesumasu = (0, _analyzeDesumasuDearu.analyzeDesumasu)(text);
        if (retDesumasu.length > 0) {
            desumasuList.push({
                node: node,
                matches: retDesumasu
            });
        }
        var retDearu = (0, _analyzeDesumasuDearu.analyzeDearu)(text);
        if (retDearu.length > 0) {
            dearuList.push({
                node: node,
                matches: retDearu
            });
        }
    }), _defineProperty(_ref5, Syntax.Document + ":exit", function undefined() {
        var desumasuCount = desumasuList.reduce(function (count, _ref3) {
            var matches = _ref3.matches;
            return count + matches.length;
        }, 0);
        var dearuCount = dearuList.reduce(function (count, _ref4) {
            var matches = _ref4.matches;
            return count + matches.length;
        }, 0);
        if (desumasuCount === 0 || dearuCount === 0) {
            return;
        }
        if (desumasuCount > dearuCount) {
            reportResult(dearuList, { dearu: true });
        } else if (desumasuCount < dearuCount) {
            reportResult(desumasuList, { desumasu: true });
        } else {
            reportResult(dearuList, { dearu: true });
        }
    }), _ref5;
};

var _analyzeDesumasuDearu = require("analyze-desumasu-dearu");

var _textlintRuleHelper = require("textlint-rule-helper");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = exports['default'];
//# sourceMappingURL=1.1.1.js.map