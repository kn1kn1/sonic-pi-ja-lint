{"version":3,"sources":["../src/3.3.js"],"names":[],"mappings":";AACA;;;;;;;;;;AAKA;;AACA;;;;AAEA,IAAM,WAAW,CACb,KADa,EACN,KADM,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,GAD/B,EACoC,GADpC,CAAX;;AAIN,IAAM,eAAe,SAAS,GAAT,CAAa,mBAAW;AACzC,WAAO,IAAI,MAAJ,CAAW,aAAa,OAAb,EAAsB,GAAjC,CAAP,CADyC;CAAX,CAA5B;AAGN,IAAM,gBAAgB,SAAS,GAAT,CAAa,mBAAW;AAC1C,WAAO,IAAI,MAAJ,CAAW,UAAU,SAAV,EAAqB,GAAhC,CAAP,CAD0C;CAAX,CAA7B;AAGN,SAAS,QAAT,CAAkB,OAAlB,EAA2B;QAClB,SAA+C,QAA/C,OADkB;QACV,YAAuC,QAAvC,UADU;QACC,SAA4B,QAA5B,OADD;QACS,QAAoB,QAApB,MADT;QACgB,YAAa,QAAb,UADhB;;AAEvB,+BACK,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,CAAC,iCAAkB,IAAlB,EAAwB,OAAxB,CAAD,EAAmC;AACnC,mBADmC;SAAvC;AAGA,YAAM,OAAO,UAAU,IAAV,CAAP;;AAJQ,oBAMd,CAAa,OAAb,CAAqB,mBAAW;AAC5B,kDAAqB,IAArB,EAA2B,OAA3B,EAAoC,OAApC,CAA4C,iBAAS;oBAC1C,QAAS,MAAT,MAD0C;;AAEjD,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,yBAAd,EAAyC;AAClD,2BAAO,KAAP;AACA,yBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,CAAR,CAA/B,EAA2C,EAA3C,CAAL;iBAFS,CAAb,EAFiD;aAAT,CAA5C,CAD4B;SAAX,CAArB;;AANc,qBAgBd,CAAc,OAAd,CAAsB,mBAAW;AAC7B,kDAAqB,IAArB,EAA2B,OAA3B,EAAoC,OAApC,CAA4C,iBAAS;oBAC1C,QAAe,MAAf,MAD0C;oBACnC,OAAQ,MAAR,KADmC;;AAEjD,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,yBAAd,EAAyC;AAClD,2BAAO,KAAP;AACA,yBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,CAAR,CAA/B,EAA2C,EAA3C,CAAL;iBAFS,CAAb,EAFiD;aAAT,CAA5C,CAD6B;SAAX,CAAtB,CAhBc;MADtB,CAFuB;CAA3B;kBA+Be;AACX,YAAQ,QAAR;AACA,WAAO,QAAP","file":"3.3.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n3.3. かっこ類と隣接する文字の間のスペースの有無\nかっこの外側、内側ともにスペースを入れません。\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {matchCaptureGroupAll} from \"match-index\";\n\nconst brackets = [\n    \"\\\\[\", \"\\\\]\", \"（\", \"）\", \"［\", \"］\", \"「\", \"」\", \"『\", \"』\"\n];\n\nconst leftBrackets = brackets.map(bracket => {\n    return new RegExp(\"\\([ 　]\\)\" + bracket, \"g\");\n});\nconst rightBrackets = brackets.map(bracket => {\n    return new RegExp(bracket + \"\\([ 　])\", \"g\");\n});\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 左にスペース\n            leftBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const {index} = match;\n                    report(node, new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n            // 右にスペース\n            rightBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const {index, text} = match;\n                    report(node, new RuleError(\"かっこの外側、内側ともにスペースを入れません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n        }\n    }\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}