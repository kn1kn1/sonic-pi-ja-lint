{"version":3,"sources":["../src/3.1.2.js"],"names":[],"mappings":";AACA;;;;;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;AACA,IAAM,KAAK,oBAAK,GAAL,CAAL;;;;;;;AAON,SAAS,QAAT,CAAkB,OAAlB,EAA2B;QAClB,SAA+C,QAA/C,OADkB;QACV,YAAuC,QAAvC,UADU;QACC,SAA4B,QAA5B,OADD;QACS,QAAoB,QAApB,MADT;QACgB,YAAa,QAAb,UADhB;;AAEvB,+BACK,OAAO,GAAP,YAAY,MAAK;AACd,YAAI,CAAC,iCAAkB,IAAlB,EAAwB,OAAxB,CAAD,EAAmC;AACnC,mBADmC;SAAvC;AAGA,YAAM,OAAO,UAAU,IAAV,CAAP;;AAJQ,YAMR,WAAW,mEAAX,CANQ;AAOd,YAAM,aAAa,eAAb,CAPQ;AAQd,kCAAS,IAAT,EAAe,QAAf,EAAyB,OAAzB,CAAiC,iBAAS;gBAC/B,QAAwB,MAAxB,MAD+B;gBACxB,gBAAiB,MAAjB;;AADwB;AAGtC,gBAAI,WAAW,IAAX,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,uBADwB;aAA5B;AAGA,0BAAc,OAAd,CAAsB,wBAAgB;AAClC,oBAAM,QAAQ,aAAa,KAAb,CADoB;AAElC,uBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,6BAAd,EAA6C;AACtD,2BAAO,KAAP;AACA,yBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,CAAR,CAA/B,EAA2C,EAA3C,CAAL;iBAFS,CAAb,EAFkC;aAAhB,CAAtB,CANsC;SAAT,CAAjC,CARc;MADtB,CAFuB;CAA3B;kBA4Be;AACX,YAAQ,QAAR;AACA,WAAO,QAAP","file":"3.1.2.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {matchAll} from \"match-index\";\nimport regx from 'regx';\nimport {japaneseRegExp} from \"./util/regexp\";\nconst rx = regx(\"g\");\n/*\n3.1.2. 全角文字どうし\n\n原則として、全角文字どうしの間にスペースを入れません。ただしカタカナ複合語の場合を除きます。\n「2.1.7 カタカナ複合語」を参照してください。\n */\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 全角同士の間は半角スペースを入れない\n            const matchReg = rx`${japaneseRegExp}( )${japaneseRegExp}`;\n            const katakakana = /[ァ-ヶ]( )[ァ-ヶ]/;\n            matchAll(text, matchReg).forEach(match => {\n                const {input, captureGroups} = match;\n                // ただしカタカナ複合語の場合を除きます。\n                if (katakakana.test(input)) {\n                    return;\n                }\n                captureGroups.forEach(captureGroup => {\n                    const index = captureGroup.index;\n                    report(node, new RuleError(\"原則として、全角文字どうしの間にスペースを入れません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n        }\n    }\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}