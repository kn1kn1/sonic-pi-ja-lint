{"version":3,"sources":["../src/2.1.5.js"],"names":[],"mappings":";AACA;;;;;;;;;;;;;;;AAUA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;AAMA,SAAS,SAAT,CAAmB,MAAnB,EAA2B;AACvB,WAAO,oBAAK,MAAL,EAAa,OAAb,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,QAAjC,EAAP,CADuB;CAA3B;;AAKA,SAAS,QAAT,CAAkB,OAAlB,EAA2B;QAClB,SAA+C,QAA/C,OADkB;QACV,YAAuC,QAAvC,UADU;QACC,QAA4B,QAA5B,MADD;QACQ,SAAqB,QAArB,OADR;QACgB,YAAa,QAAb;;AADhB;AAGvB,QAAI,WAAW,0BAAI,KAAJ,CAAU,OAAV,EAAmB;AAC9B,mBAAW,CAAC,eAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,MAA3B,EAAmC,WAAnC,CAAD,CAAX;KADW,CAAX,CAHmB;AAMvB,QAAI,kBAAkB,SAAS,OAAO,GAAP,CAA3B;;AANmB,YAQvB,CAAS,OAAO,GAAP,CAAT,GAAuB,UAAU,IAAV,EAAgB;AACnC,wBAAgB,IAAhB,EADmC;AAEnC,YAAI,CAAC,iCAAkB,IAAlB,EAAwB,OAAxB,CAAD,EAAmC;AACnC,mBADmC;SAAvC;AAGA,YAAM,OAAO,UAAU,IAAV,CAAP,CAL6B;AAMnC,YAAM,UAAU,sCAAqB,IAArB,EAA2B,qBAA3B,CAAV,CAN6B;AAOnC,gBAAQ,OAAR,CAAgB,iBAAS;gBACd,QAAe,MAAf,MADc;gBACP,OAAQ,MAAR,KADO;;AAErB,mBAAO,IAAP,EAAa,IAAI,SAAJ,CAAc,kBAAd,EAAkC;AAC3C,uBAAO,KAAP;AACA,qBAAK,MAAM,gBAAN,CAAuB,CAAC,KAAD,EAAQ,QAAQ,KAAK,MAAL,CAAvC,EAAqD,UAAU,IAAV,CAArD,CAAL;aAFS,CAAb,EAFqB;SAAT,CAAhB,CAPmC;KAAhB,CARA;AAwBvB,WAAO,QAAP,CAxBuB;CAA3B;kBA0Be;AACX,YAAQ,QAAR;AACA,WAAO,QAAP","file":"2.1.5.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.5.カタカナ\nカタカナは「全角」で表記します。\n半角カタカナは特殊な用途を除いて、原則として使いません。\n\nHalfwidth Katakana variants（半角片仮名）\n\\uFF65-\\uFF9F とする\nhttp://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/uff00.html\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {hanKarakanaRegExp} from \"./util/regexp\";\nimport prh from \"textlint-rule-prh\";\nimport path from \"path\";\nimport {matchCaptureGroupAll} from \"match-index\";\nimport moji from \"moji\";\n/**\n * 半角カタカナを全角カタカナに変換\n *\n * @param {String} str 変換したい文字列\n */\nfunction toZenkaku(string) {\n    return moji(string).convert('HK', 'ZK').toString();\n}\n\n\nfunction reporter(context) {\n    let {Syntax, RuleError, fixer, report, getSource} = context;\n    // 辞書ベースのカタカタ表記のチェックを行う\n    let dictRule = prh.fixer(context, {\n        rulePaths: [path.join(__dirname, \"..\", \"dict\", \"2.1.5.yml\")]\n    });\n    let originalStrRule = dictRule[Syntax.Str];\n    // 半角カタカナの使用をチェックする\n    dictRule[Syntax.Str] = function (node) {\n        originalStrRule(node);\n        if (!isUserWrittenNode(node, context)) {\n            return;\n        }\n        const text = getSource(node);\n        const matches = matchCaptureGroupAll(text, /([\\uFF65-\\uFF9F]+)/g);\n        matches.forEach(match => {\n            const {index, text} = match;\n            report(node, new RuleError(\"カタカナは「全角」で表記します。\", {\n                index: index,\n                fix: fixer.replaceTextRange([index, index + text.length], toZenkaku(text))\n            }));\n\n        });\n    };\n    return dictRule;\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}